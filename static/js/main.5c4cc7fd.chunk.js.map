{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","props","monsters","map","SearchBox","placeholder","handleChange","type","onChange","event","target","value","App","setState","searchField","state","fetch","then","response","json","users","this","filteredMonsters","filter","m","toLocaleLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,IAAIC,IAAG,+BAA0BH,EAAQI,GAAlC,4BAChB,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCFHC,G,MAAW,SAACC,GACvB,OACE,qBAAKP,UAAU,YAAf,SACGO,EAAMC,SAASC,KAAI,SAACV,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,WCLdO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAWH,EAAaG,EAAMC,OAAOC,YCiCpCC,E,kDAnCb,aAAe,IAAD,8BACZ,gBAcFN,aAAe,SAACK,GACd,EAAKE,SAAS,CAAEC,YAAaH,KAb7B,EAAKI,MAAQ,CACXb,SAAU,GACVY,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBE,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKP,SAAS,CAAEX,SAAUkB,S,oBAO/C,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUY,EAAlB,EAAkBA,YACZQ,EAAmBpB,EAASqB,QAAO,SAACC,GAAD,OACvCA,EAAE1B,KAAK2B,oBAAoBC,SAASZ,EAAYW,wBAGlD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9BVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5c4cc7fd.chunk.js","sourcesContent":["import './card.styles.css';\n\nexport const Card = ({ monster }) => (\n  <div className=\"card-container\">\n    <img alt=\" \" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\n    <h2>{monster.name}</h2>\n    <p>{monster.email}</p>\n  </div>\n);\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={(event) => handleChange(event.target.value)}\n  />\n);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = (value) => {\n    this.setState({ searchField: value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((m) =>\n      m.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"Search Monsters\" handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}